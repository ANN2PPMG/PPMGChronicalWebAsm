@page "/fame"
@using PPMGChronicalWebAsm.Models
@using PPMGChronicalWebAsm.Services
@using Markdig
@inject SqliteService SqliteService
@inject IJSRuntime JSRuntime

<PageTitle>Зала на славата</PageTitle>

<h1 class="text-center my-4">Нашите ученици и преподаватели</h1>

<div class="container">
    <!-- Search control -->
    <div class="row mb-4">
        <div class="col-md-6 mx-auto">
            <div class="input-group">
                <input type="text" class="form-control" placeholder="Search students..." @bind="searchTerm" @bind:event="oninput">
                <button class="btn btn-outline-secondary" type="button">
                    <i class="bi bi-search"></i>
                </button>
            </div>
        </div>
    </div>

    <!-- Student cards -->
    <div class="row">
        @if (FilteredStudents.Any())
        {
            @foreach (var student in FilteredStudents)
            {
                <div class="col-lg-4 col-md-6 mb-4">
                    <div class="card h-100 shadow hover-shadow" @onclick="() => ViewStudentDetails(student)" role="button">
                        <div class="card-img-top student-card-header">
                            @if (!string.IsNullOrEmpty(student.Picture))
                            {
                                <img src="@student.Picture" alt="@student.Name" class="student-image">
                            }
                            else
                            {
                                <div class="icon-overlay">
                                    <i class="bi bi-person-circle student-icon"></i>
                                </div>
                            }
                        </div>

                        <div class="card-body">
                            <h5 class="card-title">@student.Name</h5>
                            <p class="card-text text-muted">@(student.Bio?.Length > 100 ? student.Bio.Substring(0, 100) + "..." : student.Bio)</p>
                        </div>

                        <div class="card-footer bg-white border-0">
                            <div class="d-flex justify-content-end align-items-center">
                                <span class="view-details-link">View Profile <i class="bi bi-arrow-right-short"></i></span>
                            </div>
                        </div>
                    </div>
                </div>
            }
        }
        else
        {
            <div class="col-12 text-center py-5">
                <i class="bi bi-people fs-1 text-muted mb-3 d-block"></i>
                <p class="lead">No students found</p>
            </div>
        }
    </div>
</div>

<!-- Student Details Modal -->
<div class="modal fade" id="studentDetailsModal" tabindex="-1" aria-labelledby="studentDetailsModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-dialog-scrollable">
        <div class="modal-content">
            <div class="modal-header bg-primary text-white">
                <h5 class="modal-title" id="studentDetailsModalLabel">@(selectedStudent?.Name)</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                @if (selectedStudent != null)
                {
                    <div class="text-center mb-4">
                        @if (!string.IsNullOrEmpty(selectedStudent.Picture))
                        {
                            <img src="@selectedStudent.Picture" alt="@selectedStudent.Name" class="student-profile-image mb-3">
                        }
                        else
                        {
                            <i class="bi bi-person-circle display-1 text-secondary"></i>
                        }
                        <h4 class="mt-2">@selectedStudent.Name</h4>
                    </div>

                    <div class="mb-4">
                        <h6 class="text-uppercase text-muted mb-3">Biography</h6>
                        <div class="markdown-content">
                            @((MarkupString)RenderMarkdown(selectedStudent.Bio))
                        </div>
                    </div>
                }
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

@code {
    private List<Student> students;
    private Student selectedStudent;
    private string searchTerm = "";

    protected override async Task OnInitializedAsync()
    {
        await SqliteService.InitializeDatabaseAsync("data/PMGChronical.db");
        students = await SqliteService.GetStudentsAsync();
    }

    private IEnumerable<Student> FilteredStudents =>
        students == null
            ? new List<Student>()
            : students
                .Where(s => string.IsNullOrEmpty(searchTerm) ||
                    (s.Name?.ToLower()?.Contains(searchTerm.ToLower()) ?? false) ||
                    (s.Bio?.ToLower()?.Contains(searchTerm.ToLower()) ?? false))
                .OrderBy(s => s.Name);

    private string RenderMarkdown(string content)
    {
        if (string.IsNullOrEmpty(content))
            return "<p>No biography available.</p>";

        // Convert markdown to HTML
        return Markdown.ToHtml(content, new MarkdownPipelineBuilder().UseAdvancedExtensions().Build());
    }

    private void ViewStudentDetails(Student student)
    {
        selectedStudent = student;
        ShowModal("studentDetailsModal");
    }

    private async Task ShowModal(string modalId)
    {
        await JSRuntime.InvokeVoidAsync("showModal", modalId);
    }

    private async Task HideModal(string modalId)
    {
        await JSRuntime.InvokeVoidAsync("hideModal", modalId);
    }
}

<style>
    /* Card styling */
    .card {
        border-radius: 16px;
        border: none;
        overflow: hidden;
        transition: all 0.3s ease;
        box-shadow: 0 6px 15px rgba(0,0,0,0.08);
    }

    .hover-shadow:hover {
        transform: translateY(-8px);
        box-shadow: 0 15px 30px rgba(0,0,0,0.12) !important;
        cursor: pointer;
    }

    /* Student card header */
    .student-card-header {
        height: 220px;
        background: linear-gradient(135deg, #6e8efb, #a777e3);
        display: flex;
        align-items: center;
        justify-content: center;
        position: relative;
        overflow: hidden;
    }

    .student-image {
        width: 100%;
        height: 100%;
        object-fit: cover;
    }

    /* Icon for students without images */
    .student-icon {
        font-size: 5rem;
        color: rgba(255, 255, 255, 0.9);
        filter: drop-shadow(0 4px 6px rgba(0,0,0,0.2));
    }

    /* Student profile image in modal */
    .student-profile-image {
        max-width: 200px;
        max-height: 200px;
        border-radius: 50%;
        object-fit: cover;
        box-shadow: 0 4px 10px rgba(0,0,0,0.1);
    }

    /* Card content styling */
    .card-title {
        font-weight: 700;
        font-size: 1.2rem;
        color: #2d3748;
        margin-bottom: 0.75rem;
        line-height: 1.4;
    }

    .card-text {
        font-size: 0.9rem;
        color: #718096;
        line-height: 1.6;
    }

    /* Footer styling */
    .view-details-link {
        color: #3182ce;
        font-size: 0.85rem;
        font-weight: 600;
        display: inline-flex;
        align-items: center;
        transition: color 0.2s;
    }

        .view-details-link:hover {
            color: #2c5282;
        }

        .view-details-link .bi {
            font-size: 1.25rem;
        }

    /* Markdown content styling */
    .markdown-content {
        line-height: 1.6;
    }

        .markdown-content h1,
        .markdown-content h2,
        .markdown-content h3,
        .markdown-content h4,
        .markdown-content h5,
        .markdown-content h6 {
            margin-top: 1.5rem;
            margin-bottom: 1rem;
        }

        .markdown-content p {
            margin-bottom: 1rem;
        }

        .markdown-content ul,
        .markdown-content ol {
            margin-bottom: 1rem;
            padding-left: 2rem;
        }

        .markdown-content blockquote {
            padding: 0.5rem 1rem;
            border-left: 4px solid #e9ecef;
            color: #6c757d;
        }

        .markdown-content img {
            max-width: 80%;
            height: auto;
            display: block;
            margin: 0 auto;
        }
</style>
