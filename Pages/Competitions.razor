@page "/competitions"
@using PPMGChronicalWebAsm.Models
@using PPMGChronicalWebAsm.Services
@inject SqliteService SqliteService
@inject IJSRuntime JSRuntime

<PageTitle>Competitions</PageTitle>

<h1 class="text-center my-4">Competitions</h1>

<div class="container">
    <!-- Search and filter controls -->
    <div class="row mb-4">
        <div class="col-md-6 mb-3 mb-md-0">
            <div class="input-group">
                <input type="text" class="form-control" placeholder="Search competitions..." @bind="searchTerm" @bind:event="oninput">
                <button class="btn btn-outline-secondary" type="button">
                    <i class="bi bi-search"></i>
                </button>
            </div>
        </div>
        <div class="col-md-4 mb-3 mb-md-0">
            <select class="form-select" @bind="selectedSubject">
                <option value="">All Subjects</option>
                @foreach (var subject in GetUniqueSubjects())
                {
                    <option value="@subject">@subject</option>
                }
            </select>
        </div>
        <div class="col-md-2">
            <button class="btn btn-success w-100" @onclick="AddNewCompetition">
                <i class="bi bi-plus-circle me-1"></i> New
            </button>
        </div>
    </div>

    <!-- Competition cards -->
    <div class="row">
        @if (FilteredCompetitions.Any())
        {
            @foreach (var competition in FilteredCompetitions)
            {
                <div class="col-lg-4 col-md-6 mb-4">
                    <div class="card h-100 shadow hover-shadow">
                        <div class="card-img-top bg-light text-center py-3" style="height: 160px;">
                            <!-- Placeholder for future images -->
                            <div class="d-flex align-items-center justify-content-center h-100">
                                <i class="bi bi-trophy fs-1 text-warning"></i>
                            </div>
                        </div>
                        <div class="card-body">
                            <h5 class="card-title text-primary">@competition.name</h5>
                            <p class="card-text small text-muted mb-2">@(competition.description?.Length > 100 ? competition.description.Substring(0, 100) + "..." : competition.description)</p>

                            <div class="mt-3">
                                <span class="badge bg-info me-2">@competition.subject</span>
                                <span class="badge bg-secondary me-2">@competition.school_year</span>
                                @if (!string.IsNullOrEmpty(competition.tag))
                                {
                                    <span class="badge bg-success">@competition.tag</span>
                                }
                            </div>
                        </div>
                        <div class="card-footer bg-white">
                            <div class="d-flex justify-content-between align-items-center">
                                <small class="text-muted">@FormatDateRange(competition.period_from, competition.period_to)</small>
                                <div>
                                    <button class="btn btn-sm btn-outline-primary me-1" @onclick="() => EditCompetition(competition)">
                                        <i class="bi bi-pencil"></i>
                                    </button>
                                    <button class="btn btn-sm btn-outline-danger" @onclick="() => ConfirmDelete(competition)">
                                        <i class="bi bi-trash"></i>
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }
        }
        else
        {
            <div class="col-12 text-center py-5">
                <i class="bi bi-inbox fs-1 text-muted mb-3 d-block"></i>
                <p class="lead">No competitions found</p>
                <button class="btn btn-primary mt-2" @onclick="AddNewCompetition">Add Your First Competition</button>
            </div>
        }
    </div>
</div>

<!-- Competition Modal Form -->
<div class="modal fade" id="competitionModal" tabindex="-1" aria-labelledby="competitionModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header bg-light">
                <h5 class="modal-title" id="competitionModalLabel">@modalTitle</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form>
                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label for="name" class="form-label">Competition Name <span class="text-danger">*</span></label>
                            <input type="text" id="name" class="form-control @(string.IsNullOrEmpty(currentCompetition.name) && showValidation ? "is-invalid" : "")"
                                   @bind="currentCompetition.name" placeholder="Enter competition name" />
                            @if (string.IsNullOrEmpty(currentCompetition.name) && showValidation)
                            {
                                <div class="invalid-feedback">Name is required</div>
                            }
                        </div>
                        <div class="col-md-6 mb-3">
                            <label for="subject" class="form-label">Subject <span class="text-danger">*</span></label>
                            <input type="text" id="subject" class="form-control" @bind="currentCompetition.subject" placeholder="Mathematics, Physics, etc." />
                        </div>
                    </div>

                    <div class="mb-3">
                        <label for="description" class="form-label">Description</label>
                        <textarea id="description" class="form-control" rows="3" @bind="currentCompetition.description"
                                  placeholder="Describe the competition..."></textarea>
                    </div>

                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label for="period_from" class="form-label">Start Date</label>
                            <input type="text" id="period_from" class="form-control" @bind="currentCompetition.period_from" />
                        </div>
                        <div class="col-md-6 mb-3">
                            <label for="period_to" class="form-label">End Date</label>
                            <input type="text" id="period_to" class="form-control" @bind="currentCompetition.period_to" />
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label for="tag" class="form-label">Tag</label>
                            <input type="text" id="tag" class="form-control" @bind="currentCompetition.tag" placeholder="Optional tag" />
                        </div>
                        <div class="col-md-6 mb-3">
                            <label for="school_year" class="form-label">School Year</label>
                            <input type="text" id="school_year" class="form-control" @bind="currentCompetition.school_year" placeholder="e.g., 2023/2024" />
                        </div>
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Image (Coming Soon)</label>
                        <div class="input-group disabled">
                            <input type="file" class="form-control" disabled />
                            <label class="input-group-text">Upload</label>
                        </div>
                        <div class="form-text">Image upload functionality will be available in the future.</div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" @onclick="SaveCompetition">
                    <i class="bi bi-save me-1"></i> Save Competition
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Confirmation Modal -->
<div class="modal fade" id="deleteConfirmationModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Confirm Deletion</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to delete the competition "<strong>@(competitionToDelete?.name)</strong>"?</p>
                <p class="text-danger"><small>This action cannot be undone.</small></p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" @onclick="DeleteConfirmed">Delete</button>
            </div>
        </div>
    </div>
</div>

@code {
    private List<Competition> competitions;
    private Competition currentCompetition = new Competition();
    private Competition competitionToDelete;
    private string modalTitle;
    private string searchTerm = "";
    private string selectedSubject = "";
    private bool showValidation = false;

    protected override async Task OnInitializedAsync()
    {
        await SqliteService.InitializeDatabaseAsync("data/PMGChronical.db");
        competitions = await SqliteService.GetCompetitionsAsync();
    }

    private IEnumerable<Competition> FilteredCompetitions =>
        competitions == null
            ? new List<Competition>()
            : competitions
                .Where(c => string.IsNullOrEmpty(searchTerm) ||
                    (c.name?.ToLower()?.Contains(searchTerm.ToLower()) ?? false) ||
                    (c.description?.ToLower()?.Contains(searchTerm.ToLower()) ?? false))
                .Where(c => string.IsNullOrEmpty(selectedSubject) ||
                    c.subject == selectedSubject)
                .OrderByDescending(c => c.period_from);


    private List<string> GetUniqueSubjects()
    {
        return competitions?
            .Select(c => c.subject)
            .Where(s => !string.IsNullOrEmpty(s))
            .Distinct()
            .OrderBy(s => s)
            .ToList() ?? new List<string>();
    }

    private string FormatDateRange(string from, string to)
    {
        if (string.IsNullOrEmpty(from) && string.IsNullOrEmpty(to))
            return "Date not specified";

        if (string.IsNullOrEmpty(to))
            return $"From {from}";

        if (string.IsNullOrEmpty(from))
            return $"Until {to}";

        return $"{from} - {to}";
    }

    private void AddNewCompetition()
    {
        currentCompetition = new Competition();
        modalTitle = "Add New Competition";
        showValidation = false;
        ShowModal("competitionModal");
    }

    private void EditCompetition(Competition competition)
    {
        currentCompetition = new Competition
            {
                id = competition.id,
                name = competition.name,
                description = competition.description,
                subject = competition.subject,
                period_from = competition.period_from,
                period_to = competition.period_to,
                tag = competition.tag,
                school_year = competition.school_year
            };
        modalTitle = "Edit Competition";
        showValidation = false;
        ShowModal("competitionModal");
    }

    private void ConfirmDelete(Competition competition)
    {
        competitionToDelete = competition;
        ShowModal("deleteConfirmationModal");
    }

    private async Task DeleteConfirmed()
    {
        if (competitionToDelete != null)
        {
            await SqliteService.DeleteCompetitionAsync(int.Parse(competitionToDelete.id));
            competitions = await SqliteService.GetCompetitionsAsync();
            await HideModal("deleteConfirmationModal");
        }
    }

    private async Task SaveCompetition()
    {
        showValidation = true;

        if (string.IsNullOrEmpty(currentCompetition.name))
            return;

        if (string.IsNullOrEmpty(currentCompetition.id))
        {
            currentCompetition.id = Guid.NewGuid().ToString();
            await SqliteService.CreateCompetitionAsync(currentCompetition);
        }
        else
        {
            await SqliteService.UpdateCompetitionAsync(currentCompetition);
        }

        competitions = await SqliteService.GetCompetitionsAsync();
        await HideModal("competitionModal");
    }

    private async Task ShowModal(string modalId)
    {
        await JSRuntime.InvokeVoidAsync("showModal", modalId);
    }

    private async Task HideModal(string modalId)
    {
        await JSRuntime.InvokeVoidAsync("hideModal", modalId);
    }
}

<style>
    .hover-shadow:hover {
        transform: translateY(-5px);
        box-shadow: 0 10px 20px rgba(0,0,0,0.1) !important;
        transition: all 0.3s ease;
    }

    .card {
        transition: all 0.3s ease;
        border-radius: 8px;
        overflow: hidden;
    }

    .badge {
        font-weight: 500;
    }

    .card-title {
        font-weight: 600;
    }

    .card-img-top {
        border-bottom: 1px solid rgba(0,0,0,0.1);
    }


</style>
