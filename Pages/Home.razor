@page "/"
@using PPMGChronicalWebAsm.Models
@using PPMGChronicalWebAsm.Services
@using Markdig
@inject SqliteService SqliteService
@inject IJSRuntime JSRuntime

<PageTitle>Competitions</PageTitle>

<h1 class="text-center my-4">Нашите поводи за гордост</h1>

<div class="container">
    <!-- Search and filter controls -->
    <div class="row mb-4">
        <div class="col-md-6 mb-3 mb-md-0">
            <div class="input-group">
                <input type="text" class="form-control" placeholder="Search ..." @bind="searchTerm" @bind:event="oninput">
                <button class="btn btn-outline-secondary" type="button">
                    <i class="bi bi-search"></i>
                </button>
            </div>
        </div>
        <div class="col-md-4 mb-3 mb-md-0">
            <select class="form-select" @bind="selectedSubject">
                <option value="">All Subjects</option>
                @foreach (var subject in GetUniqueSubjects())
                {
                    <option value="@subject">@subject</option>
                }
            </select>
        </div>
        <div class="col-md-2 mb-3 mb-md-0">
            <button class="btn btn-print-preview" @onclick="Preview">
                <i class="bi bi-printer-fill me-2"></i>Преглед за печат
            </button>
        </div>
    </div>

    <!-- Competition cards -->
    <div class="row">
        @if (FilteredCompetitions.Any())
        {
            @foreach (var competition in FilteredCompetitions)
            {
                var subjectClass = GetSubjectClass(competition.subject);
                <div class="col-lg-4 col-md-6 mb-4">
                    <div class="card h-100 shadow hover-shadow" @onclick="() => ViewCompetitionDetails(competition)" role="button">
                        <!-- Card Banner/Header with gradient background -->
                        <div class="card-img-top competition-card-header @subjectClass">
                            @if (!string.IsNullOrEmpty(competition.tag))
                            {
                                <img src="@competition.tag" alt="@competition.tag" class="student-image">
                            }
                            else
                            {
                                <div class="icon-overlay">
                                    <i class="bi bi-trophy competition-icon"></i>
                                </div>
                            }
                            <div class="subject-tag">
                                <span>@competition.subject</span>
                            </div>
                        </div>

                        <div class="card-body">
                            <h5 class="card-title">@(competition.name.Length > 100 ? competition.name.Substring(0, 100) + "..." : competition.name)</h5>
                            <p class="card-text text-muted">@(competition.description?.Length > 100 ? competition.description.Substring(0, 100) + "..." : competition.description)</p>

                            <div class="mt-3 d-flex flex-wrap gap-2">
                                <span class="badge rounded-pill bg-primary">@competition.subject</span>
                                <span class="badge rounded-pill bg-secondary">@competition.school_year</span>
                            </div>
                        </div>

                        <div class="card-footer bg-white border-0">
                            <div class="d-flex justify-content-between align-items-center">
                                <small class="text-muted"><i class="bi bi-calendar-event me-1"></i>@FormatDateRange(competition.period_from, competition.period_to)</small>
                                <span class="view-details-link">Повече ... <i class="bi bi-arrow-right-short"></i></span>
                            </div>
                        </div>
                    </div>
                </div>

            }
        }
        else
        {
            <div class="col-12 text-center py-5">
                <i class="bi bi-inbox fs-1 text-muted mb-3 d-block"></i>
                <p class="lead">No competitions found</p>
            </div>
        }
    </div>
</div>

<!-- Competition Details Modal -->
<div class="modal fade" id="competitionDetailsModal" tabindex="-1" aria-labelledby="competitionDetailsModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-dialog-scrollable">
        <div class="modal-content">
            <div class="modal-header competition-modal-header">
                <h5 class="modal-title" id="competitionDetailsModalLabel">
                    <i class="bi bi-trophy-fill me-2"></i>@(selectedCompetition?.name)
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                @if (selectedCompetition != null)
                {
                    <div class="d-flex justify-content-between mb-3">
                        <div>
                            <span class="badge bg-black me-2">@selectedCompetition.id</span>
                            <span class="badge bg-info me-2">@selectedCompetition.subject</span>
                            <span class="badge bg-secondary me-2">@selectedCompetition.school_year</span>
                        </div>
                        <div>
                            <span class="text-muted">@FormatDateRange(selectedCompetition.period_from, selectedCompetition.period_to)</span>
                        </div>
                    </div>

                    @if (selectedCompetition.tag != null)
                    {
                        <div class="text-center mb-4">
                            <img class="student-profile-image mb-3" src="@selectedCompetition.tag" />
                        </div>
                    }
                    else
                    {
                        <div class="competition-banner mb-4 bg-light text-center py-4 rounded">
                            <i class="bi bi-trophy display-1 text-warning"></i>
                        </div>
                    }

                    <div class="mb-4">
                        <h6 class="text-uppercase text-muted mb-3">Статия</h6>
                        <div class="markdown-content">
                            @((MarkupString)RenderMarkdown(selectedCompetition.description))
                        </div>
                    </div>
                }
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Затвори</button>
            </div>
        </div>
    </div>
</div>

@code {
    private List<Competition> competitions;
    private Competition currentCompetition = new Competition();
    private Competition competitionToDelete;
    private Competition selectedCompetition;
    private string modalTitle;
    private string searchTerm = "";
    private string selectedSubject = "";
    private bool showValidation = false;
    [Inject] private NavigationManager NavigationManager { get; set; }


    protected override async Task OnInitializedAsync()
    {
        await SqliteService.InitializeDatabaseAsync("data/PMGChronical.db");
        competitions = await SqliteService.GetCompetitionsAsync();
    }

    private IEnumerable<Competition> FilteredCompetitions =>
        competitions == null
            ? new List<Competition>()
            : competitions
                .Where(c => string.IsNullOrEmpty(searchTerm) ||
                    (c.name?.ToLower()?.Contains(searchTerm.ToLower()) ?? false) ||
                    (c.description?.ToLower()?.Contains(searchTerm.ToLower()) ?? false))
                .Where(c => string.IsNullOrEmpty(selectedSubject) ||
                    c.subject == selectedSubject)
                .OrderByDescending(c => c.period_from);


    private List<string> GetUniqueSubjects()
    {
        return competitions?
            .Select(c => c.subject)
            .Where(s => !string.IsNullOrEmpty(s))
            .Distinct()
            .OrderBy(s => s)
            .ToList() ?? new List<string>();
    }

    private string FormatDateRange(string from, string to)
    {
        if (string.IsNullOrEmpty(from) && string.IsNullOrEmpty(to))
            return "Date not specified";

        if (string.IsNullOrEmpty(to))
            return $"From {from}";

        if (string.IsNullOrEmpty(from))
            return $"Until {to}";

        return $"{from} - {to}";
    }

    private string RenderMarkdown(string content)
    {
        if (string.IsNullOrEmpty(content))
            return "<p>No description available.</p>";

        // Convert markdown to HTML
        return Markdown.ToHtml(content, new MarkdownPipelineBuilder().UseAdvancedExtensions().Build());
    }

    private void ViewCompetitionDetails(Competition competition)
    {
        selectedCompetition = competition;
        ShowModal("competitionDetailsModal");
    }

    private async Task ShowModal(string modalId)
    {
        await JSRuntime.InvokeVoidAsync("showModal", modalId);
    }

    private async Task HideModal(string modalId)
    {
        await JSRuntime.InvokeVoidAsync("hideModal", modalId);
    }

    private string GetSubjectClass(string subject)
    {
        if (string.IsNullOrEmpty(subject)) return "";

        subject = subject.ToLower();

        if (subject.Contains("math") || subject.Contains("матем")) return "math";
        if (subject.Contains("phys") || subject.Contains("физи")) return "science";
        if (subject.Contains("liter") || subject.Contains("литер")) return "literature";
        if (subject.Contains("infor") || subject.Contains("инфор")) return "informatics";

        return "";
    }

    private void Preview()
    {
        var url = "competitions-preview";
        if (!string.IsNullOrEmpty(searchTerm) || !string.IsNullOrEmpty(selectedSubject))
        {
            url += $"?search={Uri.EscapeDataString(searchTerm)}&subject={Uri.EscapeDataString(selectedSubject)}";
        }
        NavigationManager.NavigateTo(url);
    }



}
